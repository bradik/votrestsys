DROP TABLE IF EXISTS users_vote;

DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS users;

DROP TABLE IF EXISTS restaurants_menu;
DROP TABLE IF EXISTS restaurants;

DROP SEQUENCE IF EXISTS global_seq;

CREATE SEQUENCE GLOBAL_SEQ
  AS INTEGER
  START WITH 100000;

CREATE TABLE users
(
  id         INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name       VARCHAR(255)            NOT NULL,
  email      VARCHAR(255)            NOT NULL,
  password   VARCHAR(255)            NOT NULL,
  registered TIMESTAMP DEFAULT now() NOT NULL,
  enabled    BOOLEAN DEFAULT TRUE    NOT NULL
);

CREATE UNIQUE INDEX users_unique_email_idx
  ON USERS (email);


CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES users (id)
    ON DELETE CASCADE
);

CREATE TABLE restaurants (
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  description VARCHAR(255) NOT NULL,
  address     VARCHAR(255) NOT NULL
);

CREATE TABLE restaurants_menu (
  restaurant_id INTEGER      NOT NULL,
  data          TIMESTAMP    NOT NULL,
  dish          VARCHAR(255) NOT NULL,
  price         INT          NOT NULL,
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id)
    ON DELETE CASCADE
);
CREATE UNIQUE INDEX restaurants_menu_unique_data_idx
  ON restaurants_menu (data);

CREATE TABLE users_vote (
  user_id       INTEGER   NOT NULL,
  restaurant_id INTEGER   NOT NULL,
  data          TIMESTAMP NOT NULL,
  voice         INT       NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users (id)
    ON DELETE CASCADE,
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id)
    ON DELETE CASCADE
);
CREATE UNIQUE INDEX users_vote_unique_data_idx
  ON users_vote (data);
